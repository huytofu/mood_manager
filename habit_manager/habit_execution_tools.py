"""
Habit Execution Tools
====================
Tools for daily habit execution, scheduling, tracking, and completion.
"""

from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
from langchain_core.tools import tool
from datetime import datetime, timedelta
import uuid

# Import execution functions
from utils.habit_execution import (
    _plan_flexible_habits_timing,
    _get_daily_habit_list_organized,
    _track_habit_completion_record,
)

# =============================================================================
# EXECUTION TOOL SCHEMAS
# =============================================================================

class DailyExecutionInput(BaseModel):
    operation: str = Field(..., description="Operation name: track_completion, get_daily_habits, plan_flexible_habits")
    params: Dict[str, Any] = Field(..., description="Parameters for the daily execution operation")

class ProgressTrackingInput(BaseModel):
    operation: str = Field(..., description="Operation name: calculate_trends, calculate_epic_progress")
    params: Dict[str, Any] = Field(..., description="Parameters for the progress tracking operation")

class FinalHabitAnswerInput(BaseModel):
    intervention_type: str = Field(..., description="Type of intervention: 'habit_creation', 'habit_analysis', 'habit_modification', or 'error'")
    habit_plan: Optional[Dict[str, Any]] = Field(default=None, description="Habit plan result from main habit operations")
    analysis_result: Optional[Dict[str, Any]] = Field(default=None, description="Analysis result from advanced analytics tools")
    recommendations: Optional[List[str]] = Field(default=None, description="Recommendations generated by LLM and extended with mood-supporting habits")
    error_message: Optional[str] = Field(default=None, description="Error message if intervention_type is 'error'")
    
    # Advanced analytics fields from generate_habit_insights and other analytics tools
    insights: Optional[List[str]] = Field(default=None, description="Behavioral insights from generate_habit_insights")
    patterns: Optional[Dict[str, Any]] = Field(default=None, description="Behavioral patterns from generate_habit_insights")
    integrated_analysis: Optional[Dict[str, Any]] = Field(default=None, description="Integrated analysis from multiple analytics functions")
    analysis_sources: Optional[Dict[str, Any]] = Field(default=None, description="Which analysis sources were included in insights")
    
    # Additional analytics results that may be passed directly
    underperforming_habits: Optional[List[Dict[str, Any]]] = Field(default=None, description="Results from analyze_underperforming_habits")
    epic_progress_data: Optional[Dict[str, Any]] = Field(default=None, description="Results from analyze_lagging_epic_progress")
    habit_interactions: Optional[Dict[str, Any]] = Field(default=None, description="Results from analyze_habit_interactions")
    mood_correlations: Optional[Dict[str, Any]] = Field(default=None, description="Results from analyze_mood_habit_correlation")
    
    # Daily execution and progress tracking data
    daily_plan: Optional[Dict[str, Any]] = Field(default=None, description="Daily habit planning results")
    progress_data: Optional[Dict[str, Any]] = Field(default=None, description="Progress tracking results including trends and streaks")

class FinalHabitAnswerOutput(BaseModel):
    habit_plan: Optional[Dict[str, Any]] = Field(default=None, description="Habit creation/modification results")
    analysis: Optional[Dict[str, Any]] = Field(default=None, description="Analysis results")
    recommendations: List[str] = Field(..., description="List of actionable recommendations for the user")
    intervention_type: str = Field(..., description="Type of intervention performed")
    error_type: Optional[str] = Field(default=None, description="Error type if intervention failed, None otherwise")
    
    # Advanced analytics fields to match generate_habit_insights and other analytics
    insights: Optional[List[str]] = Field(default=None, description="Behavioral insights from analytics")
    patterns: Optional[Dict[str, Any]] = Field(default=None, description="Behavioral patterns discovered")
    integrated_analysis: Optional[Dict[str, Any]] = Field(default=None, description="Integrated analysis combining multiple sources")
    analysis_sources: Optional[Dict[str, Any]] = Field(default=None, description="Analysis sources included")
    
    # Individual analytics results for detailed access
    underperforming_habits: Optional[List[Dict[str, Any]]] = Field(default=None, description="Underperforming habits analysis")
    epic_progress_data: Optional[Dict[str, Any]] = Field(default=None, description="Epic goal progress analysis")
    habit_interactions: Optional[Dict[str, Any]] = Field(default=None, description="Habit interaction analysis")
    mood_correlations: Optional[Dict[str, Any]] = Field(default=None, description="Mood correlation analysis")
    
    # Daily execution and progress data
    daily_plan: Optional[Dict[str, Any]] = Field(default=None, description="Daily habit planning results")
    progress_data: Optional[Dict[str, Any]] = Field(default=None, description="Progress tracking data with trends and streaks")

# =============================================================================
# DAILY EXECUTION TOOLS
# =============================================================================

@tool("daily_execution_operations", args_schema=DailyExecutionInput)
async def daily_execution_operations(operation: str, params: Dict[str, Any]) -> Dict[str, Any]:
    """
    Tool Purpose: Execute daily habit operations (tracking, planning, scheduling).
    
    Args:
    - operation (str): Operation name (track_completion, get_daily_habits, plan_flexible_habits)
    - params (Dict[str, Any]): Parameters for the daily execution operation
    
    Returns:
    - Dict containing: success (bool), data (Any), operation (str), error (str if failed)
    """
    try:
        if operation == "track_completion":
            result = await _track_habit_completion_record(
                user_id=params.get("user_id"),
                habit_id=params.get("habit_id"),
                date=params.get("date"),
                completion_score=params.get("completion_score"),
                actual_timing=params.get("actual_timing"),
                notes=params.get("notes")
            )
        elif operation == "get_daily_habits":
            result = await _get_daily_habit_list_organized(
                user_id=params.get("user_id"),
                date=params.get("date")
            )
        elif operation == "plan_flexible_habits":
            result = await _plan_flexible_habits_timing(
                user_id=params.get("user_id"),
                date=params.get("date"),
                available_time_slots=params.get("available_time_slots", []),
                energy_level=params.get("energy_level", 5)
            )
        else:
            raise ValueError(f"Unknown daily execution operation: {operation}")
        
        return {
            "success": result.get("success", False),
            "data": result,
            "operation": operation,
            "error": result.get("error") if not result.get("success", False) else None
        }
        
    except Exception as e:
        return {
            "success": False,
            "data": None,
            "operation": operation,
            "error": f"Error executing {operation}: {str(e)}"
        }

@tool("progress_tracking_operations", args_schema=ProgressTrackingInput)
async def progress_tracking_operations(operation: str, params: Dict[str, Any]) -> Dict[str, Any]:
    """
    Tool Purpose: Execute progress tracking operations (trends, epic progress).
    
    Args:
    - operation (str): Operation name (calculate_trends, calculate_epic_progress)
    - params (Dict[str, Any]): Parameters for the progress tracking operation
    
    Returns:
    - Dict containing: success (bool), data (Any), operation (str), error (str if failed)
    """
    try:
        if operation == "calculate_trends":
            from utils.habit_analytics import _calculate_basic_habit_trends
            result = await _calculate_basic_habit_trends(
                habit_id=params.get("habit_id"),
                time_period=params.get("time_period"),
                start_date=params.get("start_date"),
                end_date=params.get("end_date")
            )
        elif operation == "calculate_epic_progress":
            from utils.habit_analytics import _calculate_basic_epic_progress
            result = await _calculate_basic_epic_progress(
                epic_habit_id=params.get("epic_habit_id"),
                time_period=params.get("time_period")
            )
        else:
            raise ValueError(f"Unknown progress tracking operation: {operation}")
        
        return {
            "success": result.get("success", False),
            "data": result,
            "operation": operation,
            "error": result.get("error") if not result.get("success", False) else None
        }
        
    except Exception as e:
        return {
            "success": False,
            "data": None,
            "operation": operation,
            "error": f"Error executing {operation}: {str(e)}"
        }

@tool("final_habit_answer", args_schema=FinalHabitAnswerInput)
def final_habit_answer(
    intervention_type: str,
    habit_plan: Optional[Dict[str, Any]] = None,
    analysis_result: Optional[Dict[str, Any]] = None,
    recommendations: Optional[List[str]] = None,
    error_message: Optional[str] = None,
    # Advanced analytics fields
    insights: Optional[List[str]] = None,
    patterns: Optional[Dict[str, Any]] = None,
    integrated_analysis: Optional[Dict[str, Any]] = None,
    analysis_sources: Optional[Dict[str, Any]] = None,
    underperforming_habits: Optional[List[Dict[str, Any]]] = None,
    epic_progress_data: Optional[Dict[str, Any]] = None,
    habit_interactions: Optional[Dict[str, Any]] = None,
    mood_correlations: Optional[Dict[str, Any]] = None,
    daily_plan: Optional[Dict[str, Any]] = None,
    progress_data: Optional[Dict[str, Any]] = None
) -> FinalHabitAnswerOutput:
    """
    Tool Purpose: Provide final consolidated answer for habit management operations.
    
    Args:
    - intervention_type (str): Type of intervention performed
    - habit_plan (Optional[Dict]): Habit creation/modification results
    - analysis_result (Optional[Dict]): Analysis results from analytics tools
    - recommendations (Optional[List[str]]): Generated recommendations
    - error_message (Optional[str]): Error message if failed
    - Additional analytics fields for comprehensive reporting
    
    Returns:
    - FinalHabitAnswerOutput: Consolidated response with all relevant data
    """
    try:
        # Ensure recommendations is a list
        if recommendations is None:
            recommendations = []
        
        # Handle error cases
        if intervention_type == "error":
            return FinalHabitAnswerOutput(
                habit_plan=None,
                analysis=None,
                recommendations=recommendations or ["Please try again or contact support for assistance"],
                intervention_type=intervention_type,
                error_type=error_message,
                insights=None,
                patterns=None,
                integrated_analysis=None,
                analysis_sources=None,
                underperforming_habits=None,
                epic_progress_data=None,
                habit_interactions=None,
                mood_correlations=None,
                daily_plan=None,
                progress_data=None
            )
        
        # Success case - return comprehensive data
        return FinalHabitAnswerOutput(
            habit_plan=habit_plan,
            analysis=analysis_result,
            recommendations=recommendations,
            intervention_type=intervention_type,
            error_type=None,
            insights=insights,
            patterns=patterns,
            integrated_analysis=integrated_analysis,
            analysis_sources=analysis_sources,
            underperforming_habits=underperforming_habits,
            epic_progress_data=epic_progress_data,
            habit_interactions=habit_interactions,
            mood_correlations=mood_correlations,
            daily_plan=daily_plan,
            progress_data=progress_data
        )
        
    except Exception as e:
        # Fallback error handling
        return FinalHabitAnswerOutput(
            habit_plan=None,
            analysis=None,
            recommendations=["An error occurred while processing your request. Please try again."],
            intervention_type="error",
            error_type=f"Final answer processing error: {str(e)}",
            insights=None,
            patterns=None,
            integrated_analysis=None,
            analysis_sources=None,
            underperforming_habits=None,
            epic_progress_data=None,
            habit_interactions=None,
            mood_correlations=None,
            daily_plan=None,
            progress_data=None
        ) 